{
	"info": {
		"_postman_id": "32740484-3815-44c6-bbfb-ccb6d663cf2d",
		"name": "Sansera_API'S",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26749259"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "LogIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Emp_id is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.emp_id).to.eql('emp000');\r",
									"});\r",
									"\r",
									"pm.test(\"Member name is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.memberName).to.eql('Admin');\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"ID is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('id');\r",
									"});\r",
									"console.log(jsonData.message.id)\r",
									"\r",
									"pm.test(\"Email is present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('email');\r",
									"});\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"token\", res.message.accessToken);\r",
									"pm.environment.set(\"userId\", res.message.id);\r",
									"pm.test(\"Admin Login\", function () {\r",
									"pm.expect(jsonData.message.isAdmin).to.eql(true)\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\": \"login\",\r\n    \"emp_id\": \"emp000\",\r\n    \"password\": \"password\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Emp_id is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.message).to.eql('Logged Out Successfully');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\":\"logout\",\r\n    \"user_id\": \"{{userId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Members",
			"item": [
				{
					"name": "fetch_member_by_role",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"fetch_member_by_role\", \r\n \"role\": \"FORK OPERATOR\",\r\n \"parent_suborg_id\":\"63adcac9589165b9a1ce6c28\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/org-service",
							"host": [
								"{{url}}"
							],
							"path": [
								"org-service"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Suppliers",
			"item": [
				{
					"name": "get_suppliers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"supplier_id\", res.message[0]._id);\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"ID is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier_name');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('type');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('color'); \r",
									"});\r",
									"pm.test(\"Material Details is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_details'); \r",
									"});\r",
									"pm.test(\"Material Grade is present inside Material details\", function () {\r",
									"    pm.expect(jsonData.message[0].material_details[0]).to.have.property('material_grade'); \r",
									"});\r",
									"pm.test(\"Diameter is present inside Material details\", function () {\r",
									"    pm.expect(jsonData.message[0].material_details[0]).to.have.property('diameter'); \r",
									"});\r",
									"pm.test(\"Component id is present inside Material details\", function () {\r",
									"    pm.expect(jsonData.message[0].material_details[0]).to.have.property('component_id'); \r",
									"});\r",
									"pm.test(\"material_code is present inside Material details\", function () {\r",
									"    pm.expect(jsonData.message[0].material_details[0]).to.have.property('material_code'); \r",
									"});\r",
									"\r",
									"const today = new Date();\r",
									"const year = today.getFullYear();\r",
									"const month = String(today.getMonth() + 1).padStart(2, '0');\r",
									"const day = String(today.getDate()).padStart(2, '0');\r",
									"\r",
									"const formattedDate = `${year}-${month}-${day}`;\r",
									"console.log(formattedDate);\r",
									"pm.environment.set(\"today_date\",formattedDate);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_suppliers\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/supplier",
							"host": [
								"{{url}}"
							],
							"path": [
								"supplier"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Raw_Materials",
			"item": [
				{
					"name": "add_raw_material",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var req=JSON.parse(request.data)\r",
									"console.log(req)\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0, 9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message.arrival_date\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"\r",
									"pm.test(\"Arrival Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"Created Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('bundle_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"Device map is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('device_map');\r",
									"});\r",
									" \r",
									"\r",
									"pm.environment.set(\"batch_num\", res.message.batch_num);\r",
									"\r",
									"if (Object.keys(jsonData.message.device_map).length === 0) {\r",
									"    tests= false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Device map contains some data\", function () {\r",
									"pm.expect(tests).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"batch_num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"\r",
									"pm.test(\"unit_num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('type');\r",
									"});\r",
									"pm.test(\"diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"material_code is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material_grade is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"color is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('color');\r",
									"});\r",
									"pm.test(\"total_weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"heat_num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"created_by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"approved_by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current_weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"reject_weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"approved_date is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('approved_date');\r",
									"});\r",
									"pm.test(\"_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"__v is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('__v');\r",
									"});\r",
									"pm.test(\"created_by_emp_name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_by_emp_name');\r",
									"});\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"arrival_date\", res.message.current_date);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\": \"add_raw_material\",\r\n    \"supplier_id\": \"{{supplier_id}}\",\r\n    \"material_code\": \"M2\",\r\n    \"material_grade\": \"A\",\r\n    \"heat_num\": \"AL4858\",\r\n    \"type\": \"Steel\",\r\n    \"total_weight\": 1200,\r\n    \r\n    \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_material_fifo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"batch num name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Material code is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material grade is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"Diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('color');\r",
									"});\r",
									"pm.test(\"Total weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"Heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Created by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"Approved by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"rejected weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"fifo is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('fifo');\r",
									"});\r",
									"pm.test(\"Element number is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.fifo[0].element_num).to.eql(\"C1\");\r",
									"});\r",
									"pm.test(\"Element Id is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.fifo[0].element_id).to.eql(\"48-06-B2-1B\");\r",
									"});\r",
									"pm.test(\"Element number is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.fifo[1].element_num).to.eql(\"C2\");\r",
									"});\r",
									"pm.test(\"Element Id is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.fifo[1].element_id).to.eql(\"48-06-B0-0D\");\r",
									"});\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0, 9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message.arrival_date\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"\r",
									"pm.test(\"Arrival Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"Created Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"FIFO is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Device map is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('device_map');\r",
									"});\r",
									"\r",
									"\r",
									"if (jsonData.message.fifo.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"Fifo contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.device_map).length === 0) {\r",
									"    tests= false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Device map contains some data\", function () {\r",
									"pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"element num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('element_num');\r",
									"});\r",
									"pm.test(\"element id is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('element_id');\r",
									"});\r",
									"pm.test(\"id num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('_id');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"op\": \"update_material_fifo\",\r\n\"batch_num\": \"{{batch_num}}\",\r\n\"unit_num\":\"{{unit_num}}\",\r\n \"fifo\": [ \r\n{\"element_num\": \"C1\", \"element_id\": \"48-06-B2-1B\"},\r\n{\"element_num\": \"C2\", \"element_id\": \"48-06-B0-0D\"}\r\n]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_raw_materials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.status).to.eql(\"APPROVED\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"batch num name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Material code is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material grade is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"Diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('color');\r",
									"});\r",
									"pm.test(\"Total weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"Heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Created by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"Approved by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"rejected weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"fifo is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('fifo');\r",
									"});\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0, 9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message.arrival_date\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"pm.test(\"Arrival Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"approved Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"Created Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"Device map is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('device_map');\r",
									"});\r",
									"if (Object.keys(jsonData.message.device_map).length === 0) {\r",
									"    tests= false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Device map contains some data\", function () {\r",
									"pm.expect(tests).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"element num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('element_num');\r",
									"});\r",
									"pm.test(\"element id is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('element_id');\r",
									"});\r",
									"pm.test(\"id num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('_id');\r",
									"});\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"status\", res.message.status);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\": \"update_raw_material\",\r\n    \"batch_num\": \"{{batch_num}}\",\r\n    \"unit_num\":\"{{unit_num}}\",\r\n    \"status\": \"APPROVED\",\r\n    \"appr_certificate\": \"data:application/pdf;base64,\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_batch_details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.status).to.eql(\"APPROVED\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"batch num name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Material code is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material grade is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"Diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('color');\r",
									"});\r",
									"pm.test(\"Total weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"Heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Created by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"Approved by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"rejected weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"fifo is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('fifo');\r",
									"});\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0, 9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message.arrival_date\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"pm.test(\"Arrival Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"approved Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"Created Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"Device map is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('device_map');\r",
									"});\r",
									"if (Object.keys(jsonData.message.device_map).length === 0) {\r",
									"    tests= false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Device map contains some data\", function () {\r",
									"pm.expect(tests).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"element num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('element_num');\r",
									"});\r",
									"pm.test(\"element id is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('element_id');\r",
									"});\r",
									"pm.test(\"id num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('_id');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_batch_details\",\r\n \"batch_num\": \"{{batch_num}}\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "list_raw_material_by_type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var req=JSON.parse(request.data)\r",
									"console.log(req)\r",
									"\r",
									"var json=JSON.parse(responseBody)\r",
									"console.log(json)\r",
									"\r",
									"//request response data validation\r",
									"pm.test(\"request response data validation \",()=>{\r",
									"pm.expect(json.message[0].type).to.eql(req.type)\r",
									"pm.expect(json.message[0].unit_num).to.eql(req.unit_num)\r",
									"})\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"Status is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('status');\r",
									"});\r",
									"pm.test(\"batch num name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Material code is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material grade is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"Diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('color');\r",
									"});\r",
									"pm.test(\"Total weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"Heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Created by is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"Approved by is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"rejected weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"fifo is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0,9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message[0].arrival_date\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"\r",
									"pm.test(\"Device map is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('device_map');\r",
									"});\r",
									"if (Object.keys(jsonData.message[0].device_map).length === 0) {\r",
									"    tests= false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Device map contains some data\", function () {\r",
									"pm.expect(tests).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"list_raw_material_by_type\",\r\n \"type\": \"Steel\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "list_raw_material_by_supplier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"Status is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('status');\r",
									"});\r",
									"pm.test(\"batch num name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Material code is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material grade is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"Diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('color');\r",
									"});\r",
									"pm.test(\"Total weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"Heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Created by is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"Approved by is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"rejected weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"fifo is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0,9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message[0].arrival_date\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"\r",
									"pm.test(\"Device map is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('device_map');\r",
									"});\r",
									"if (Object.keys(jsonData.message[0].device_map).length === 0) {\r",
									"    tests= false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Device map contains some data\", function () {\r",
									"pm.expect(tests).to.eql(true);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"list_raw_material_by_supplier\",\r\n \"supplier_id\": \"{{supplier_id}}\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "list_raw_material_by_heat_num",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"Status is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('status');\r",
									"});\r",
									"pm.test(\"batch num name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Material code is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material grade is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"Diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('color');\r",
									"});\r",
									"pm.test(\"Total weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"Heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Created by is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"Approved by is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"rejected weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"fifo is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0,9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message[0].arrival_date\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"// Define the input date string\r",
									"const dateStr = extractedStr;\r",
									"\r",
									"// Split the date string into day, month, and year components\r",
									"const dateComponents = dateStr.split(\"/\");\r",
									"\r",
									"// Parse the day, month, and year components into numbers\r",
									"const day = parseInt(dateComponents[1]);\r",
									"const month = parseInt(dateComponents[0]);\r",
									"const year = parseInt(dateComponents[2]);\r",
									"\r",
									"// Format the day and month components with leading zeroes\r",
									"const formattedDay = day < 10 ? \"0\" + day : day;\r",
									"const formattedMonth = month < 10 ? \"0\" + month : month;\r",
									"\r",
									"// Construct the formatted date string\r",
									"const formattedDate = `${formattedMonth}-${formattedDay}-${year}`;\r",
									"\r",
									"// Output the formatted date string\r",
									"console.log(formattedDate); // \"02-05-2022\"\r",
									"\r",
									"\r",
									"pm.environment.set(\"arrival_date\", formattedDate);\r",
									"//pm.environment.unset(\"arrival\");\r",
									"\r",
									"pm.test(\"Device map is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('device_map');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n \"op\": \"list_raw_material_by_heat_num\",\r\n \"heat_num\": \"AL4858\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "list_raw_material_by_arrival_date",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"Status is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('status');\r",
									"});\r",
									"pm.test(\"batch num name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Material code is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material grade is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"Diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('color');\r",
									"});\r",
									"pm.test(\"Total weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"Heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Created by is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"Approved by is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"rejected weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"fifo is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0,9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message[0].arrival_date\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Device map is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('device_map');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\": \"list_raw_material_by_arrival_date\",\r\n    \"arrival_date\": \"{{arrival_date}}\",\r\n    \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "list_raw_material_by_status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status  is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message[0].status).to.eql(pm.environment.get(\"status\"));\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"Status is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('status');\r",
									"});\r",
									"pm.test(\"batch num name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Material code is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material grade is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"Diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('color');\r",
									"});\r",
									"pm.test(\"Total weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"Heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Created by is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"Approved by is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"rejected weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"fifo is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0,9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message[0].arrival_date\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"\r",
									"pm.test(\"Device map is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('device_map');\r",
									"});\r",
									"if (Object.keys(jsonData.message[0].device_map).length === 0) {\r",
									"    tests= false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Device map contains some data\", function () {\r",
									"pm.expect(tests).to.eql(true);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"list_raw_material_by_status\",\r\n \"status\": \"{{status}}\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_next_raw_material_item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"element num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('element_num');\r",
									"});\r",
									"\r",
									"pm.test(\"element id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('element_id');\r",
									"});\r",
									"\r",
									"pm.test(\"id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_next_raw_material_item\", \r\n \"batch_num\": \"{{batch_num}}\",\r\n \"unit_num\":\"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "pop_material",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"batch num name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Material code is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material grade is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"Diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('color');\r",
									"});\r",
									"pm.test(\"Total weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"Heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Created by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"Approved by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"rejected weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"fifo is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('fifo');\r",
									"});\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0, 9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message.arrival_date\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"pm.test(\"Arrival Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"approved Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"Created Date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"\r",
									"pm.test(\"element num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('element_num');\r",
									"});\r",
									"pm.test(\"element id is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('element_id');\r",
									"});\r",
									"pm.test(\"id num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.fifo[0]).to.have.property('_id');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n \"op\": \"pop_material\", \r\n \"batch_num\": \"{{batch_num}}\",\r\n  \"unit_num\":\"{{unit_num}}\",\r\n \"bundle_weight\": \"100\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_certificate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"batch num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"\r",
									"pm.test(\"appr certificate is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('appr_certificate');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"get_certificate\", \r\n \"batch_num\": \"{{batch_num}}\", \r\n \"status\": \"APPROVED\",\r\n \"unit_num\":\"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove_compartment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"pm.test(\"Status is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.status).to.eql(\"APPROVED\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"batch num name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Material code is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_code');\r",
									"});\r",
									"pm.test(\"material grade is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('material_grade');\r",
									"});\r",
									"pm.test(\"Diameter is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('diameter');\r",
									"});\r",
									"pm.test(\"Color is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('color');\r",
									"});\r",
									"pm.test(\"Total weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_weight');\r",
									"});\r",
									"pm.test(\"Supplier name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"Heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"Created by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"Approved by is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('approved_by');\r",
									"});\r",
									"pm.test(\"current weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('current_weight');\r",
									"});\r",
									"pm.test(\"rejected weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('reject_weight');\r",
									"});\r",
									"pm.test(\"Bundle weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('bundle_weight');\r",
									"});\r",
									"pm.test(\"fifo is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"remove_compartment\", \r\n \"batch_num\": \"{{batch_num}}\", \r\n \"element_num\": [\"C1\",\"C2\"],\r\n \"removed_weight\": 200,\r\n \"unit_num\":\"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/raw-materials",
							"host": [
								"{{url}}"
							],
							"path": [
								"raw-materials"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Forge Machine",
			"item": [
				{
					"name": "list_forge_machines",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"\r",
									"pm.test(\"Forge machine id is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('forge_machine_id');\r",
									"});\r",
									"\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('unit_num');\r",
									"});\r",
									"\r",
									"pm.test(\"die num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"die num used time is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('die_num_used_time');\r",
									"});\r",
									"\r",
									"if (jsonData.message[0].die_num_used_time.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"die_num_used_time contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"forge_machine_id\", res.message[1]._id);\r",
									"\r",
									"\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message[1]).to.have.property('_id');\r",
									"});\r",
									"\r",
									"pm.test(\"Forge machine id is Present\", function () {\r",
									"    pm.expect(jsonData.message[1]).to.have.property('forge_machine_id');\r",
									"});\r",
									"\r",
									"pm.test(\"unit num is Present\", function () {\r",
									"    pm.expect(jsonData.message[1]).to.have.property('unit_num');\r",
									"});\r",
									"\r",
									"pm.test(\"die num is Present\", function () {\r",
									"    pm.expect(jsonData.message[1]).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"die num used time is Present\", function () {\r",
									"    pm.expect(jsonData.message[1]).to.have.property('die_num_used_time');\r",
									"});\r",
									"\r",
									"if (jsonData.message[1].die_num_used_time.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"die_num_used_time contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"element num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message[0].die_num_used_time[0]).to.have.property('die_num');\r",
									"});\r",
									"pm.test(\"element id is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message[0].die_num_used_time[0]).to.have.property('start_date');\r",
									"});\r",
									"pm.test(\"id num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message[0].die_num_used_time[0]).to.have.property('end_date');\r",
									"});\r",
									"\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"forge_machine_id\", res.message[1]._id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"list_forge_machines\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/forge-machine",
							"host": [
								"{{url}}"
							],
							"path": [
								"forge-machine"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Customer",
			"item": [
				{
					"name": "get_customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"\r",
									"pm.test(\"customer name name is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('customer_name');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"component_ids is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('component_ids');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"batch_num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('batch_num');\r",
									"});\r",
									"\r",
									"pm.test(\"created_on is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('created_on');\r",
									"});\r",
									"pm.test(\"id name is Present\", function () {\r",
									"    pm.expect(jsonData.message[1]).to.have.property('_id');\r",
									"});\r",
									"\r",
									"pm.test(\"customer_name is Present\", function () {\r",
									"    pm.expect(jsonData.message[1]).to.have.property('customer_name');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"component_ids is Present\", function () {\r",
									"    pm.expect(jsonData.message[1]).to.have.property('component_ids');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"batch_num is Present\", function () {\r",
									"    pm.expect(jsonData.message[1]).to.have.property('batch_num');\r",
									"});\r",
									"\r",
									"pm.test(\"created_on is Present\", function () {\r",
									"    pm.expect(jsonData.message[1]).to.have.property('created_on');\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_customers\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/customer",
							"host": [
								"{{url}}"
							],
							"path": [
								"customer"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "MQTT-Service",
			"item": [
				{
					"name": "list_topics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"\r",
									"    pm.response.to.have.status(200);\r",
									"\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"topic name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('topic_name');\r",
									"});\r",
									"pm.test(\"unit num  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"type  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('type');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"list_topics\",\r\n\"unit_num\": \"{{unit_num}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/mqtt-service",
							"host": [
								"{{url}}"
							],
							"path": [
								"mqtt-service"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"device id  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('device_id');\r",
									"});\r",
									"pm.test(\"unit num  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"element num is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('element_num');\r",
									"});\r",
									"pm.test(\"type is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('type');\r",
									"});\r",
									"pm.test(\"gateway type name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('gateway_type');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_device\",\r\n \"unit_num\":\"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/mqtt-service",
							"host": [
								"{{url}}"
							],
							"path": [
								"mqtt-service"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Process-Line",
			"item": [
				{
					"name": "add_process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"process\", res.message.process_name);\r",
									"pm.test(\"Component Id is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.component_id).to.eql(\"HSSC\");\r",
									"});\r",
									"pm.test(\"Component Weight is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.component_weight).to.eql(345);\r",
									"});\r",
									"pm.test(\"Component COunt is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.component_count).to.eql(4500);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									"pm.test(\"unit_num   is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"created_by   is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_by');\r",
									"});\r",
									"pm.test(\"process  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"updated_by   is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('updated_by');\r",
									"});\r",
									"pm.test(\"created_on is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_on');\r",
									"});\r",
									"pm.test(\"_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"__v is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('__v');\r",
									"});\r",
									"pm.test(\"updated_on is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('updated_on');\r",
									"});\r",
									"pm.test(\"finished_on is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_on');\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"add_process\",\r\n \"batch_num\": \"{{batch_num}}\",\r\n \"unit_num\":\"{{unit_num}}\",\r\n \"forge_machine_id\": \"{{forge_machine_id}}\",\r\n \"customer_id\": \"63ad93b4589165b9a1ce6aa8\",\r\n \"component_id\": \"HSSC\",\r\n \"component_count\": \"4500\",\r\n \"component_weight\": 345\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_process\",\r\n \"process_name\": \"{{process}}\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_process_shearing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Stage name is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[0].stage_name).to.eql(\"Shearing\");\r",
									"});\r",
									"pm.test(\"Component is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[0].ok_component).to.eql(30);\r",
									"});\r",
									"pm.test(\"Bits count number is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[0].ok_bits_count).to.eql(10);\r",
									"});\r",
									"pm.test(\"Bits Weight is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[0].ok_bits_weight).to.eql(100);\r",
									"});\r",
									"pm.test(\"Hold Material Weight is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[0].hold_materials_weight).to.eql(10);\r",
									"});\r",
									"\r",
									"pm.test(\"Component Id is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.component_id).to.eql(\"HSSC\");\r",
									"});\r",
									"pm.test(\"Component Weight is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.component_weight).to.eql(345);\r",
									"});\r",
									"pm.test(\"Component COunt is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.component_count).to.eql(4500);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									"pm.test(\"ok_component is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[0].ok_component).to.eql(30);\r",
									"\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"update_process\",\r\n \"process_name\": \"{{process}}\",\r\n \"unit_num\":\"{{unit_num}}\",\r\n \"stage_name\": \"Shearing\",\r\n \"ok_end_billets_weight\": 90,\r\n \"ok_component\": 30,\r\n \"ok_bits_count\":10,\r\n \"ok_bits_weight\":100,\r\n \"hold_materials_weight\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_process_oiling",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Component Id is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.component_id).to.eql(\"HSSC\");\r",
									"});\r",
									"pm.test(\"Component Weight is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.component_weight).to.eql(345);\r",
									"});\r",
									"pm.test(\"Component COunt is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.component_count).to.eql(4500);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									"pm.test(\"ok_component  is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[6].ok_component).to.eql(45000);\r",
									"\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"update_process\", \r\n \"unit_num\":\"{{unit_num}}\",\r\n \"process_name\": \"{{process}}\", \r\n \"stage_name\": \"Oiling\",\r\n \"ok_component\": 45000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_process_forging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"    \r",
									"});\r",
									"pm.test(\"ok_component  is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[1].ok_component).to.eql(45000);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"update_process\", \r\n \"unit_num\":\"{{unit_num}}\",\r\n \"process_name\": \"{{process}}\", \r\n \"stage_name\": \"Forging\",\r\n \"ok_component\": 45000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_process_shot_Blasting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									"pm.test(\"ok_component  is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[2].ok_component).to.eql(45000);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"update_process\", \r\n \"unit_num\":\"{{unit_num}}\",\r\n \"process_name\": \"{{process}}\", \r\n \"stage_name\": \"Shot blasting\",\r\n \"ok_component\": 45000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_process_Billet_Punching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"update_process\", \r\n \"unit_num\":\"{{unit_num}}\",\r\n \"process_name\": \"{{process}}\", \r\n \"stage_name\": \"Billet Punching\"\r\n \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_process_shoot_peening",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									"pm.test(\"ok_component  is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[5].ok_component).to.eql(45000);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"update_process\", \r\n \"unit_num\":\"{{unit_num}}\",\r\n \"process_name\": \"{{process}}\", \r\n \"stage_name\": \"Shot peening\",\r\n \"ok_component\": 45000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_process_Visual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									"pm.test(\"ok_component  is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.process[3].ok_component).to.eql(45000);\r",
									"\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"update_process\", \r\n \"unit_num\":\"{{unit_num}}\",\r\n \"process_name\": \"{{process}}\", \r\n \"stage_name\": \"Visual\",\r\n \"ok_component\": 45000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_process_finished_component_count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"process name  is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('process_name');",
									"});",
									"pm.test(\"batch num  is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('batch_num');",
									"});",
									"pm.test(\"forge machine id  is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');",
									"});",
									"pm.test(\"die num  is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('die_num');",
									"});",
									"",
									"pm.test(\"supplier is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('supplier');",
									"});",
									"pm.test(\"heat num is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('heat_num');",
									"});",
									"pm.test(\"customer is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('customer');",
									"});",
									"pm.test(\"component_id is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('component_id');",
									"});",
									"pm.test(\"component weight is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('component_weight');",
									"});",
									"pm.test(\"component count is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('component_count');",
									"});",
									"pm.test(\"finished component is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('finished_component');",
									"});",
									"pm.test(\"batch num used is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');",
									"});",
									"pm.test(\"status is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('status');",
									"});",
									"pm.test(\"process array is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('process');",
									"});",
									"if (jsonData.message.process.length === 0) {",
									"    result = false;",
									"} else {",
									"    result = true;",
									"}",
									"pm.test(\"process array contains some data\", function () {",
									"pm.expect(result).to.eql(true);",
									"});",
									"if (Object.keys(jsonData.message.process).length === 0) {",
									"    tests = false;",
									"} else {",
									"    tests = true;",
									"}",
									"pm.test(\"Process contains some data\", function () {",
									"    pm.expect(tests).to.eql(true);",
									"});",
									"pm.test(\"stage_name is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');",
									"});",
									"pm.test(\"order  is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');",
									"});",
									"pm.test(\"ok_component is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');",
									"});",
									"pm.test(\"sub_stage is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');",
									"});",
									"",
									"pm.test(\"input_stage is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');",
									"});",
									"",
									"pm.test(\"output_stage is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');",
									"});",
									"",
									"pm.test(\"input_enabled is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');",
									"});",
									"",
									"pm.test(\"fifo is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');",
									"});",
									"",
									"pm.test(\"last_popped_element is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');",
									"});",
									"",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');",
									"});",
									"",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');",
									"});",
									"",
									"pm.test(\"ok_bits_count is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');",
									"});",
									"",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');",
									"});",
									"pm.test(\"ok_component  is Matching\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message.process[3].ok_component).to.eql(45000);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\n{\n    \"op\": \"update_process\",\n    \"process_name\": \"{{process}}\",\n    \"unit_num\": \"{{unit_num}}\",\n    \"status\": \"FINISHED\",\n    \"finished_component\": 45000,\n    \"component_count\": 45000\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "Push_element",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"push_element\",\r\n \"unit_num\":\"{{unit_num}}\",\r\n \"process_name\": \"{{process}}\",\r\n \"stage_name\": \"Billet punching\",\r\n \"element_num\": \"Bin2\",\r\n \"element_id\": \"48-06-B7-1B\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_next_element",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"element num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('element_num');\r",
									"});\r",
									"\r",
									"pm.test(\"element id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('element_id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"get_next_element\", \r\n \"process_name\": \"{{process}}\", \r\n \"unit_num\":\"{{unit_num}}\",\r\n \"stage_name\": \"Billet punching\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_process_inputs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"approved_batches array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('approved_batches');\r",
									"});\r",
									"if (jsonData.message.approved_batches.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"approved_batches array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"batch num is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"unit num  is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"supplier is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"material code is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('material_code');\r",
									"});\r",
									"\r",
									"pm.test(\"material grade is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('material_grade');\r",
									"});\r",
									"\r",
									"pm.test(\"diameter is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('diameter');\r",
									"});\r",
									"\r",
									"pm.test(\"color is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('color');\r",
									"});\r",
									"\r",
									"pm.test(\"heat num is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('heat_num');\r",
									"});\r",
									"\r",
									"pm.test(\"lstatus is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('status');\r",
									"});\r",
									"\r",
									"pm.test(\"created by is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('created_by');\r",
									"});\r",
									"\r",
									"pm.test(\"approved by is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('approved_by');\r",
									"});\r",
									"\r",
									"pm.test(\"current weight is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('current_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"created on is Present inside approved_batches\", function () {\r",
									"    pm.expect(jsonData.message.approved_batches[0]).to.have.property('created_on');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_process_inputs\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_stages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Type is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.type).to.eql(\"Steel\");\r",
									"});\r",
									"var jsonData = pm.response.json();\r",
									"if (jsonData.message.stages.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"stages array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"pm.test(\"Shearing is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[0]).to.eql(\"Shearing\");\r",
									"});\r",
									"pm.test(\"Forging is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[1]).to.eql(\"Forging\");\r",
									"});\r",
									"pm.test(\"Shot blasting is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[2]).to.eql(\"Shot blasting\");\r",
									"});\r",
									"pm.test(\"Visual is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[3]).to.eql(\"Visual\");\r",
									"});\r",
									"pm.test(\"MPI is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[4]).to.eql(\"MPI\");\r",
									"});\r",
									"pm.test(\"Shot peening is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[5]).to.eql(\"Shot peening\");\r",
									"});\r",
									"pm.test(\"Oiling is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[6]).to.eql(\"Oiling\");\r",
									"});\r",
									"pm.test(\"Dispatch is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[7]).to.eql(\"Dispatch\");\r",
									"});\r",
									"pm.test(\"Billet punching is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[8]).to.eql(\"Billet punching\");\r",
									"});\r",
									"pm.test(\"Under heat is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[9]).to.eql(\"Under heat\");\r",
									"});\r",
									"pm.test(\"Rework is present\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stages[10]).to.eql(\"Rework\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\":\"get_stages\",\r\n \"type\":\"Steel\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove_element",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									"pm.test(\"total_rejections is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('total_rejections');\r",
									"});\r",
									"pm.test(\"_id is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('_id');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"remove_element\",\r\n \"unit_num\":\"{{unit_num}}\",\r\n \"process_name\": \"{{process}}\",\r\n \"stage_name\": \"Billet punching\",\r\n \"element_id\": \"48-06-B7-1B\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "Push_element_again",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"push_element\",\r\n \"unit_num\":\"{{unit_num}}\",\r\n \"process_name\": \"{{process}}\",\r\n \"stage_name\": \"Billet punching\",\r\n \"element_num\": \"Bin2\",\r\n \"element_id\": \"48-06-B7-1B\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									"if (Object.keys(jsonData.message.process[8].fifo).length === 0) {\r",
									"    tests1 = false;\r",
									"} else {\r",
									"    tests1 = true;\r",
									"}\r",
									"pm.test(\"fifo contains some data\", function () {\r",
									"    pm.expect(tests1).to.eql(true);\r",
									"});\r",
									"pm.test(\"element_num is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.process[8].fifo[0]).to.have.property('element_num');\r",
									"});\r",
									"pm.test(\"element_id is Present inside fifo\", function () {\r",
									"    pm.expect(jsonData.message.process[8].fifo[0]).to.have.property('element_num');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_process\",\r\n \"process_name\": \"{{process}}\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Process Consumption",
			"item": [
				{
					"name": "get_process_consumption",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"unit_num name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"component_id name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"ok_end_billets name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('ok_end_billets');\r",
									"});\r",
									"pm.test(\"ok_end_billets_in_kg name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('ok_end_billets_in_kg');\r",
									"});\r",
									"pm.test(\"ok_bits_count name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"pm.test(\"ok_bits_weight name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									"pm.test(\"total_quantity name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('total_quantity');\r",
									"});\r",
									"pm.test(\"balance_quantity name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('balance_quantity');\r",
									"});\r",
									"pm.test(\"created_on name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('created_on');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\": \"get_process_consumption\",\r\n    \"process_name\": \"{{process}}\",\r\n    \"date\": \"{{today_date}}\",\r\n    \"stage_name\": \"Shearing\",\r\n    \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-consumption",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-consumption"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Operator Tasks",
			"item": [
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"task_id\", res.message._id);\r",
									"\r",
									"pm.test(\"Stage is Matching is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stage).to.eql(\"Billet punching\");\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"unit_num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"stage is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('stage');\r",
									"});\r",
									"pm.test(\"task_state is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('task_state');\r",
									"});\r",
									"pm.test(\"requester_id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('requester_id');\r",
									"});\r",
									"pm.test(\"resolver_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('resolver_id');\r",
									"});\r",
									"pm.test(\"forge_machine_id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"type  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('type');\r",
									"});\r",
									"pm.test(\"created_on  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_on');\r",
									"});\r",
									"pm.test(\"updated on  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('updated_on');\r",
									"});\r",
									"pm.test(\"id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"let now = new Date();\r",
									"let dateString = `${now.getDate()}/${now.getMonth()+1}/${now.getFullYear()}, ${formatAMPM(now)}`;\r",
									"\r",
									"function formatAMPM(date) {\r",
									"  let hours = date.getHours();\r",
									"  let minutes = date.getMinutes();\r",
									"  let seconds = date.getSeconds();\r",
									"  let ampm = hours >= 12 ? 'pm' : 'am';\r",
									"  hours = hours % 12;\r",
									"  hours = hours ? hours : 12; // the hour '0' should be '12'\r",
									"  minutes = minutes < 10 ? '0'+minutes : minutes;\r",
									"  seconds = seconds < 12 ? '0'+seconds : seconds;\r",
									"  let strTime = hours + ':' + minutes + ':' + seconds + ' ' + ampm;\r",
									"  return strTime;\r",
									"}\r",
									"console.log(dateString);\r",
									"const current_date = dateString.slice(0, 9);\r",
									"\r",
									"var res = JSON.parse(responseBody);\r",
									"date=res.message.created_on\r",
									"console.log(date)\r",
									"const extractedStr = date.slice(0, 9);\r",
									"\r",
									"console.log(extractedStr); \r",
									"console.log(current_date);\r",
									"\r",
									"pm.test(\"created on date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									"pm.test(\"updated on date  is Matching\", function () {\r",
									"pm.expect(extractedStr).to.eql(current_date);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"create\",\r\n \"process_name\": \"{{process}}\",\r\n \"unit_num\":\"{{unit_num}}\",\r\n \"resolver_id\": \"{{userId}}\",\r\n \"stage\": \"Billet punching\"\r\n}\r\n\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/operator-task-service",
							"host": [
								"{{url}}"
							],
							"path": [
								"operator-task-service"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('process_name');\r",
									"});\r",
									"\r",
									"pm.test(\"stage is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('stage');\r",
									"});\r",
									"pm.test(\"task_state is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('task_state');\r",
									"});\r",
									"pm.test(\"requester_id  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('requester_id');\r",
									"});\r",
									"pm.test(\"resolver_id is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('resolver_id');\r",
									"});\r",
									"pm.test(\"forge_machine_id  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"type  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('type');\r",
									"});\r",
									"pm.test(\"created_on  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('created_on');\r",
									"});\r",
									"pm.test(\"updated on  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('updated_on');\r",
									"});\r",
									"pm.test(\"requester_emp_name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('requester_emp_name');\r",
									"});\r",
									"pm.test(\"resolver_emp_name  is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('resolver_emp_name');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_request\",\r\n \"resolver_id\": \"{{userId}}\",\r\n \"task_state\": [\"REQUESTED\"],\r\n \"unit_num\": \"{{unit_num}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/operator-task-service",
							"host": [
								"{{url}}"
							],
							"path": [
								"operator-task-service"
							]
						}
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Task state is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.task_state).to.eql('FULFILLED');\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"unit_num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('unit_num');\r",
									"});\r",
									"pm.test(\"stage is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('stage');\r",
									"});\r",
									"pm.test(\"task_state is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('task_state');\r",
									"});\r",
									"pm.test(\"requester_id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('requester_id');\r",
									"});\r",
									"pm.test(\"resolver_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('resolver_id');\r",
									"});\r",
									"pm.test(\"forge_machine_id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"type  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('type');\r",
									"});\r",
									"pm.test(\"created_on  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_on');\r",
									"});\r",
									"pm.test(\"updated on  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('updated_on');\r",
									"});\r",
									"pm.test(\"id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"update\",\r\n \"_id\": \"{{task_id}}\",\r\n \"task_state\": \"FULFILLED\",\r\n \"resolver_id\": \"{{userId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/operator-task-service",
							"host": [
								"{{url}}"
							],
							"path": [
								"operator-task-service"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove_request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"op\": \"remove_request\",\r\n\"_id\": \"{{task_id}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/operator-task-service",
							"host": [
								"{{url}}"
							],
							"path": [
								"operator-task-service"
							]
						}
					},
					"response": []
				},
				{
					"name": "get-process",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"process name  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"batch num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num');\r",
									"});\r",
									"pm.test(\"forge machine id  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('forge_machine_id');\r",
									"});\r",
									"pm.test(\"die num  is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('die_num');\r",
									"});\r",
									"\r",
									"pm.test(\"supplier is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('supplier');\r",
									"});\r",
									"pm.test(\"heat num is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('heat_num');\r",
									"});\r",
									"pm.test(\"customer is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('customer');\r",
									"});\r",
									"pm.test(\"component_id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_id');\r",
									"});\r",
									"pm.test(\"component weight is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_weight');\r",
									"});\r",
									"pm.test(\"component count is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('component_count');\r",
									"});\r",
									"pm.test(\"finished component is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('finished_component');\r",
									"});\r",
									"pm.test(\"batch num used is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('batch_num_used');\r",
									"});\r",
									"pm.test(\"status is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('status');\r",
									"});\r",
									"pm.test(\"process array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process');\r",
									"});\r",
									"if (jsonData.message.process.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"process array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"if (Object.keys(jsonData.message.process).length === 0) {\r",
									"    tests = false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Process contains some data\", function () {\r",
									"    pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"stage_name is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order  is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"ok_component is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_component');\r",
									"});\r",
									"pm.test(\"sub_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('sub_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"output_stage is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('output_stage');\r",
									"});\r",
									"\r",
									"pm.test(\"input_enabled is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('input_enabled');\r",
									"});\r",
									"\r",
									"pm.test(\"fifo is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('fifo');\r",
									"});\r",
									"\r",
									"pm.test(\"last_popped_element is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('last_popped_element');\r",
									"});\r",
									"\r",
									"pm.test(\"hold_materials_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('hold_materials_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_end_billets_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_end_billets_weight');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_count is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_count');\r",
									"});\r",
									"\r",
									"pm.test(\"ok_bits_weight is Present inside process\", function () {\r",
									"    pm.expect(jsonData.message.process[0]).to.have.property('ok_bits_weight');\r",
									"});\r",
									"if (Object.keys(jsonData.message.process[8].fifo).length === 0) {\r",
									"    tests1 = false;\r",
									"} else {\r",
									"    tests1 = true;\r",
									"}\r",
									"pm.test(\"fifo is empty\", function () {\r",
									"    pm.expect(tests1).to.eql(false);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_process\",\r\n \"process_name\": \"{{process}}\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/process-line",
							"host": [
								"{{url}}"
							],
							"path": [
								"process-line"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Rejection",
			"item": [
				{
					"name": "update_rejection_Billet_punching",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"billet_punching_rejections\", res.message.total_rejections);\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"process name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"stage nmae is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"total rejection is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_rejections');\r",
									"});\r",
									"pm.test(\"rejections array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('rejections');\r",
									"});\r",
									"if (jsonData.message.rejections.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"rejections array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"pm.test(\"Reason is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.rejections[0]['billet punching rejection'][0]['reason 1 for billet punching rejection']).to.eql(jsonData.message.total_rejections);\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\": \"update_rejection\",\r\n    \"unit_num\": \"{{unit_num}}\",\r\n    \"process_name\": \"{{process}}\",\r\n    \"stage_name\": \"Billet punching\",\r\n    \"rejections\": {\r\n        \"billet punching rejection\": {\r\n            \"reason 1 for billet punching rejection\": 100\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"rejection"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_rejection_shearing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"Shearing_Rejections\", res.message.total_rejections);\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"process name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"stage nmae is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"total rejection is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_rejections');\r",
									"});\r",
									"pm.test(\"rejections array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('rejections');\r",
									"});\r",
									"if (jsonData.message.rejections.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"rejections array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"pm.test(\"Reason is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.rejections[0]['Shearing'][0]['Shearing Rejection reason 1']).to.eql(jsonData.message.total_rejections);\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\": \"update_rejection\",\r\n    \"unit_num\": \"{{unit_num}}\",\r\n    \"process_name\": \"{{process}}\",\r\n    \"stage_name\": \"Shearing\",\r\n    \"rejections\": {\r\n        \"Shearing\": {\r\n            \"Shearing Rejection reason 1\": 100\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"rejection"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_rejection_Forging",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"Forging_Rejections\", res.message.total_rejections);\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"process name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"stage nmae is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"total rejection is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_rejections');\r",
									"});\r",
									"pm.test(\"rejections array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('rejections');\r",
									"});\r",
									"if (jsonData.message.rejections.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"rejections array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"pm.test(\"Reason is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.rejections[6]['Substation rejection'][1]['Buster'][0]['reason 1 for Buster']).to.eql(jsonData.message.total_rejections);\r",
									"    \r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"update_rejection\",\r\n \"process_name\": \"{{process}}\",\r\n \"unit_num\":\"{{unit_num}}\",\r\n \"stage_name\": \"Forging\",\r\n \"rejections\": {\r\n \"Substation rejection\": {\r\n \"Buster\": {\r\n \"reason 1 for Buster\": 100\r\n }\r\n }\r\n }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"rejection"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_rejection_Shot_Blasting",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"Shot_Blasting_Rejections\", res.message.total_rejections);\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"process name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"stage nmae is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"total rejection is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_rejections');\r",
									"});\r",
									"pm.test(\"rejections array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('rejections');\r",
									"});\r",
									"if (jsonData.message.rejections.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"rejections array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"pm.test(\"Reason is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.rejections[0]['Shot blasting'][0]['Shot Blasting Rejection reason 1']).to.eql(jsonData.message.total_rejections);\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\": \"update_rejection\",\r\n    \"unit_num\": \"{{unit_num}}\",\r\n    \"process_name\": \"{{process}}\",\r\n    \"stage_name\": \"Shot blasting\",\r\n    \"rejections\": {\r\n        \"Shot blasting\": {\r\n            \"Shot Blasting Rejection reason 1\": 100\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"rejection"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_rejection_Shoot_Peening",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"Shoot_Peening_Rejections\", res.message.total_rejections);\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"process name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"stage nmae is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"total rejection is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_rejections');\r",
									"});\r",
									"pm.test(\"rejections array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('rejections');\r",
									"});\r",
									"if (jsonData.message.rejections.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"rejections array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"pm.test(\"Reason is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.rejections[0]['Shot Peening'][0]['Shot Peening Rejection reason 1']).to.eql(jsonData.message.total_rejections);\r",
									"    \r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\": \"update_rejection\",\r\n    \"unit_num\": \"{{unit_num}}\",\r\n    \"process_name\": \"{{process}}\",\r\n    \"stage_name\": \"Shot peening\",\r\n    \"rejections\": {\r\n        \"Shot Peening\": {\r\n            \"Shot Peening Rejection reason 1\": 100\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"rejection"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_rejection_Visual",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"Visual_Rejections\", res.message.total_rejections);\r",
									"\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"process name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"stage nmae is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"total rejection is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_rejections');\r",
									"});\r",
									"pm.test(\"rejections array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('rejections');\r",
									"});\r",
									"if (jsonData.message.rejections.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"rejections array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"pm.test(\"Reason is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.rejections[0]['Visual'][0]['Visual rejection reason 1']).to.eql(jsonData.message.total_rejections);\r",
									"    \r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"op\": \"update_rejection\",\r\n    \"unit_num\": \"{{unit_num}}\",\r\n    \"process_name\": \"{{process}}\",\r\n    \"stage_name\": \"Visual\",\r\n    \"rejections\": {\r\n        \"Visual\": {\r\n            \"Visual rejection reason 1\": 100\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"rejection"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_rejections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Stage name is Matching\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message.stage_name).to.eql('Billet punching');\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"process name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"pm.test(\"stage nmae is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"total rejection is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('total_rejections');\r",
									"});\r",
									"pm.test(\"rejections array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('rejections');\r",
									"});\r",
									"if (jsonData.message.rejections.length === 0) {\r",
									"    result = false;\r",
									"} else {\r",
									"    result = true;\r",
									"}\r",
									"pm.test(\"rejections array contains some data\", function () {\r",
									"pm.expect(result).to.eql(true);\r",
									"});\r",
									"pm.test(\"created on field is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('created_on');\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"get_rejections\", \r\n \"process_name\": \"{{process}}\",\r\n \"unit_name\":\"{{unit_num}}\", \r\n \"stage_name\": \"Billet punching\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"rejection"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_rejection_summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"process name is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('process_name');\r",
									"});\r",
									"if (Object.keys(jsonData.message.rejections).length === 0) {\r",
									"    tests= false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"rejections contains some data\", function () {\r",
									"pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"Stage name is Present inside rejections\", function () {\r",
									"    pm.expect(jsonData.message.rejections[0]).to.have.property('stage_name');\r",
									"});\r",
									"pm.test(\"order is Present inside rejections\", function () {\r",
									"    pm.expect(jsonData.message.rejections[0]).to.have.property('order');\r",
									"});\r",
									"pm.test(\"total rejections is Present inside rejections\", function () {\r",
									"    pm.expect(jsonData.message.rejections[0]).to.have.property('total_rejections');\r",
									"});\r",
									"pm.test(\"Shearing count in Matching\", function () {\r",
									"    pm.expect(jsonData.message.rejections[0].total_rejections).to.equal(pm.environment.get(\"Shearing_Rejections\"));\r",
									"});\r",
									"pm.test(\"Forging count in Matching\", function () {\r",
									"    pm.expect(jsonData.message.rejections[1].total_rejections).to.equal(pm.environment.get(\"Forging_Rejections\"));\r",
									"});\r",
									"pm.test(\" shot blasting count in Matching\", function () {\r",
									"    pm.expect(jsonData.message.rejections[2].total_rejections).to.equal(pm.environment.get(\"Shot_Blasting_Rejections\"));\r",
									"});\r",
									"pm.test(\"visual count in Matching\", function () {\r",
									"    pm.expect(jsonData.message.rejections[3].total_rejections).to.equal(pm.environment.get(\"Visual_Rejections\"));\r",
									"});\r",
									"pm.test(\"Shot peening count in Matching\", function () {\r",
									"    pm.expect(jsonData.message.rejections[4].total_rejections).to.equal(pm.environment.get(\"Shoot_Peening_Rejections\"));\r",
									"});\r",
									"pm.test(\"Billet punching count in Matching\", function () {\r",
									"    pm.expect(jsonData.message.rejections[5].total_rejections).to.equal(pm.environment.get(\"billet_punching_rejections\"));\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_rejection_summary\",\r\n \"process_name\": \"{{process}}\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"rejection"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Batch rejection reasons",
			"item": [
				{
					"name": "add_batch_reason",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"var res = JSON.parse(responseBody);\r",
									"pm.environment.set(\"rejection_id\", res.message._id);\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"rejection_reason is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('rejection_reason');\r",
									"});\r",
									"pm.test(\"id is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"__v is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('__v');\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var uu = Math.random().toString(5).substring(\"Defective material reason\");\r",
									"pm.environment.set(\"variable_key\", uu);\r",
									"\r",
									"//var uName=uu+\"@gmail.com\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"add_batch_reason\", \r\n \"rejection_reason\": \"Defective material reason {{$randomInt}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/batch-rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"batch-rejection"
							]
						}
					},
					"response": []
				},
				{
					"name": "get_batch_reason",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"if (Object.keys(jsonData.message).length === 0) {\r",
									"    tests= false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"Device map contains some data\", function () {\r",
									"pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"id is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('_id');\r",
									"});\r",
									"pm.test(\"rejection_reason is Present\", function () {\r",
									"    pm.expect(jsonData.message[0]).to.have.property('rejection_reason');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"get_batch_reasons\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/batch-rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"batch-rejection"
							]
						}
					},
					"response": []
				},
				{
					"name": "update_batch_reason",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const jsonData = pm.response.json();",
									"pm.test(\"rejection_reason is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('rejection_reason');",
									"});",
									"pm.test(\"id is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('_id');",
									"});",
									"pm.test(\"__v is Present\", function () {",
									"    pm.expect(jsonData.message).to.have.property('__v');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"op\": \"update_batch_reason\",\n\"_id\": \"{{rejection_id}}\",\n\"rejection_reason\": \"Defective material reason {{$randomInt}} updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/batch-rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"batch-rejection"
							]
						}
					},
					"response": []
				},
				{
					"name": "remove_batch_reason",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n \"op\": \"remove_batch_reason\", \r\n \"_id\": \"{{rejection_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/batch-rejection",
							"host": [
								"{{url}}"
							],
							"path": [
								"batch-rejection"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Compartments",
			"item": [
				{
					"name": "get_compartments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"matrix is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('matrix');\r",
									"});\r",
									"pm.test(\"compartments array is Present\", function () {\r",
									"    pm.expect(jsonData.message).to.have.property('compartments');\r",
									"});\r",
									"\r",
									"if (Object.keys(jsonData.message.compartments).length === 0) {\r",
									"    tests= false;\r",
									"} else {\r",
									"    tests = true;\r",
									"}\r",
									"pm.test(\"compartments contains some data\", function () {\r",
									"pm.expect(tests).to.eql(true);\r",
									"});\r",
									"pm.test(\"column is Present in matrix\", function () {\r",
									"    pm.expect(jsonData.message.matrix).to.have.property('column');\r",
									"});\r",
									"pm.test(\"row is Present in matrix\", function () {\r",
									"    pm.expect(jsonData.message.matrix).to.have.property('row');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n \"op\": \"get_compartments\",\r\n \"unit_num\": \"{{unit_num}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/compartment",
							"host": [
								"{{url}}"
							],
							"path": [
								"compartment"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}